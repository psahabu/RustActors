4/7
IO blocks tasks reading in from TcpStream (45,25,1)
Error propagation is bounded at the task (45,83,2)
Vec<T> and ~[T] are different (46,2,5)

3/5
Proposal to lock other references out if an &mut borrows (44,92,3)
Higher-kinded types and monads v. Hack (44,98,2-3)
Send, other builtin traits may require explicit implementation (44,102,2)
cargo-lite package manager (45,2,3)
Faster task communication (45,5,4)
Unlimited channels are bad again (45,19,4)

2/19
Card game simulator looks like an Actor problem (44,57,1)
	notion of a "game manager"/master actor is difficult
Use issue numbers in commit messages (44,63,4)
Debate on what reader.lines() returns in io error cases
Closures are stack allocated, can't be returned (44,83,2)
	proc() allows them to be heap allocated, but used only once
	~Trait object allows them to be used many times
	bare functions can be returned if there's no need to close on state


2/14
After returning None, iterators have undefined behavior
	use Fuse to get an iterator that always returns None at the end (44,53,1)

2/10
How are futures related to actors?
Is it possible to compose actors somehow? (Actor-combinator Actor)

2/6
I/O may change to handle EOFs differently (44,26,1)
bounds may be allowed in type (incl struct) definitions (44,28,2)
	http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/
(44,31) is generally interesting (futures, smart-pointer deref, custom type bounds)

2/3
Unifying closure and proc declaration (44,20,1), waiting on trait closures
New I/O always returns an IoResult<T>, really Result<T, IoError> (44,22,1)

2/1
Proposal to slightly tweak parametric polymorphism declarations (44,8,4)

1/31
Compile-time function execution/evaluation (43,137,1)
	improves perf by doing known computations at compile-time
	also a pseudo-replacement for macros
	competing idea of hygeinic macros (43,140,3)
Faster task inter-communication (43,140,4)
	channels were somewhat slow, want them to be faster
	Disruptor implementation (http://lmax-exchange.github.io/disruptor/)
Multiplex io Erlang style: ioserver (43,141,4)
	centralize io loops into a separate thread
	pipe-based "wakeup" from this
Futures in Rust (43,147,1)
	explicit asynchronicity, can create synchronicity
	exploring cloning a stream

1/27
(43,122,1)
proposal to unify native/green tasks:
	(stacks/thread, tasks/stacks)
	(1, 1) => current Rust native tasks
	(1, N) => Python greenlets
	(N, 1) => current Rust green tasks
	(N, M) => proposal in my original mail
tenuous since there is code written with different assumptions
(43,125,5)
Asynchronous replies like Akka Futures: http://doc.akka.io/docs/akka/snapshot/scala/futures.html)
Turning asynchronous requests into synchronous operation (Akka doesn't have this)
ZMQ (inter-task communication): http://zeromq.org/
(43,131,4)
Some issues with rustpkg, may be deprecated soon (why?)

1/25
Actor model mentioned as useful, something Erlang/OTP-like (43,117)
Performance concerns about actors (43, 118, 3)
Two different kinds of tasks:
	Native tasks - analogous to OS threads
	Green tasks - analogous to user threads
Proposal to swtich green stacks from large stacks to memcpyed stacks (43, 118, 4)

1/24
Channel debate is nearly resolved.
Focus of rust is on single consumer message passing (Vol 43, Issue 114)
	issue taken with no shared memory, points to Arc/MutexArc
	i.e. concurrent hash table split into shards
	Wants concurrency to be based on multiple-consumer/producer queue
	response (Vol 43, Issue 115)
		it's the easiest conceptually, concurrency pkg in future
		difficulty with proposed queue is select on multiple consumers

1/21
Bounded/unbounded channels seem to be a major issue.
	stronger arguments for bounded
libgreen (user threads)/libnative (OS threads) split from libstd
	don't think this influences where the actor library goes
Avoid foo/foo-opt issues
Macros can have multiple items, but only one statement
Many different kinds of channels (to be implemented)
	Chan trait, unbounded:
		throws errors for potential overflow
		multi-producer
	SharedChan, from Chan (could just be Chan): multi-consumer
	UniqueChan, from Chan: single-consumer
	SyncChan, bounded:
		blocking send
		returning try_send: success/full/closed return
		multi-producer, single-consumer
Code reviewing: https://github.com/mozilla/rust/wiki/Note-code-review
gdb to get error backtraces, break on rust_fail
Rust Continuous Integration: http://www.rust-ci.org/help/
pointers are implicitly copyable unless destructor is created
	i.e. original pointer is invalid when copied into another struct


